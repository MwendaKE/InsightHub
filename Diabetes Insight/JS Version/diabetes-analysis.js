const fs = require('fs');
const csv = require('csv-parser');
const PDFDocument = require('pdfkit');
const path = require('path');

// Configuration
const OUT_DIR = "report_output";
const PDF_FILENAME = path.join(OUT_DIR, "Diabetes_Analysis_Report.pdf");

if (!fs.existsSync(OUT_DIR)) {
    fs.mkdirSync(OUT_DIR, { recursive: true });
}

// -------------------------------
// Data Loading Functions
// -------------------------------
async function loadDiabetesData(filePath) {
    return new Promise((resolve, reject) => {
        const results = [];
        fs.createReadStream(filePath)
            .pipe(csv())
            .on('data', (data) => results.push(data))
            .on('end', () => {
                console.log(`✅ Diabetes data loaded: ${results.length} records`);
                const processedData = results.map(row => {
                    const processed = {};
                    for (const key in row) {
                        processed[key] = isNaN(row[key]) ? row[key] : parseFloat(row[key]);
                    }
                    return processed;
                });
                resolve(processedData);
            })
            .on('error', reject);
    });
}

function cleanDiabetesData(data) {
    const cleanedData = data.filter(row => 
        row.Glucose && row.BMI && row.Age && row.Outcome !== null
    );
    console.log(`✅ Data cleaned: ${cleanedData.length} records remaining`);
    return cleanedData;
}

// -------------------------------
// Analysis Functions
// -------------------------------
function calculateStatistics(data) {
    const diabetic = data.filter(row => row.Outcome === 1);
    const nonDiabetic = data.filter(row => row.Outcome === 0);
    
    return {
        totalPatients: data.length,
        diabetesCount: diabetic.length,
        nonDiabetesCount: nonDiabetic.length,
        diabetesPercentage: (diabetic.length / data.length) * 100,
        avgGlucoseDiabetic: calculateMean(diabetic.map(row => row.Glucose)),
        avgGlucoseNonDiabetic: calculateMean(nonDiabetic.map(row => row.Glucose)),
        avgBMIDiabetic: calculateMean(diabetic.map(row => row.BMI)),
        avgBMINonDiabetic: calculateMean(nonDiabetic.map(row => row.BMI)),
        avgAgeDiabetic: calculateMean(diabetic.map(row => row.Age)),
        avgAgeNonDiabetic: calculateMean(nonDiabetic.map(row => row.Age)),
        avgPregnanciesDiabetic: calculateMean(diabetic.map(row => row.Pregnancies)),
        avgPregnanciesNonDiabetic: calculateMean(nonDiabetic.map(row => row.Pregnancies))
    };
}

function calculateMean(arr) {
    if (arr.length === 0) return 0;
    return arr.reduce((a, b) => a + b, 0) / arr.length;
}

function calculateCorrelations(data) {
    const features = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'];
    const correlations = {};
    
    features.forEach(feature => {
        const featureValues = data.map(row => row[feature]);
        const outcomeValues = data.map(row => row.Outcome);
        correlations[feature] = pearsonCorrelation(featureValues, outcomeValues);
    });
    
    // Sort by absolute correlation
    const sortedCorrelations = Object.entries(correlations)
        .sort((a, b) => Math.abs(b[1]) - Math.abs(a[1]));
    
    return { correlations, sortedCorrelations };
}

function pearsonCorrelation(x, y) {
    const n = x.length;
    const sumX = x.reduce((a, b) => a + b, 0);
    const sumY = y.reduce((a, b) => a + b, 0);
    const sumXY = x.reduce((acc, val, i) => acc + val * y[i], 0);
    const sumX2 = x.reduce((acc, val) => acc + val * val, 0);
    const sumY2 = y.reduce((acc, val) => acc + val * val, 0);
    
    const numerator = n * sumXY - sumX * sumY;
    const denominator = Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));
    
    return denominator === 0 ? 0 : numerator / denominator;
}

// -------------------------------
// PDF Report Generation
// -------------------------------
async function generateDiabetesPDF(stats, correlations) {
    return new Promise((resolve, reject) => {
        const doc = new PDFDocument();
        const stream = fs.createWriteStream(PDF_FILENAME);
        doc.pipe(stream);

        // Title Page
        doc.fontSize(24).text('DIABETES PATIENT ANALYSIS REPORT', 50, 100, { align: 'center' });
        doc.fontSize(16).text('Comprehensive Clinical Feature Analysis', 50, 150, { align: 'center' });
        doc.fontSize(12).text(`Generated on ${new Date().toLocaleString()}`, 50, 200, { align: 'center' });
        doc.text('Analysed by Mwenda E. Njagi @ Github.com/MwendaKE/InsightHub', 50, 250, { align: 'center' });
        
        // Add the footer text only on the first page
        doc.fontSize(8).text('Generated by Insight Hub Analysis Program - https://github.com/MwendaKE/InsightHub', 
                             50, 280, { align: 'center' });
        
        doc.addPage();

        // Executive Summary
        doc.fontSize(18).text('Executive Summary', 50, 50);
        doc.fontSize(12);
        let yPosition = 80;
        
        const summaryLines = [
            `• Comprehensive analysis of ${stats.totalPatients} patient records`,
            `• Diabetes prevalence: ${stats.diabetesPercentage.toFixed(1)}% (${stats.diabetesCount} patients)`,
            `• Non-diabetic: ${stats.nonDiabetesCount} patients`,
            `• Glucose difference: +${(stats.avgGlucoseDiabetic - stats.avgGlucoseNonDiabetic).toFixed(1)} mg/dL in diabetic patients`,
            `• BMI difference: +${(stats.avgBMIDiabetic - stats.avgBMINonDiabetic).toFixed(1)} in diabetic patients`,
            `• Age difference: +${(stats.avgAgeDiabetic - stats.avgAgeNonDiabetic).toFixed(1)} years`,
            `• Pregnancies difference: +${(stats.avgPregnanciesDiabetic - stats.avgPregnanciesNonDiabetic).toFixed(1)}`
        ];
        
        summaryLines.forEach(line => {
            if (yPosition > 650) {
                doc.addPage();
                yPosition = 50;
                doc.fontSize(18).text('Executive Summary (Continued)', 50, yPosition);
                yPosition += 40;
            }
            doc.text(line, 50, yPosition);
            yPosition += 20;
        });
        
        doc.addPage();

        // Detailed Statistics
        doc.fontSize(16).text('Detailed Statistics', 50, 50);
        yPosition = 80;
        
        const statsLines = [
            'GLUCOSE LEVELS:',
            `  Diabetic average: ${stats.avgGlucoseDiabetic.toFixed(1)} mg/dL`,
            `  Non-diabetic average: ${stats.avgGlucoseNonDiabetic.toFixed(1)} mg/dL`,
            `  Difference: +${(stats.avgGlucoseDiabetic - stats.avgGlucoseNonDiabetic).toFixed(1)} mg/dL`,
            '',
            'BMI ANALYSIS:',
            `  Diabetic average: ${stats.avgBMIDiabetic.toFixed(1)}`,
            `  Non-diabetic average: ${stats.avgBMINonDiabetic.toFixed(1)}`,
            `  Difference: +${(stats.avgBMIDiabetic - stats.avgBMINonDiabetic).toFixed(1)}`,
            '',
            'OTHER FACTORS:',
            `  Average age (diabetic): ${stats.avgAgeDiabetic.toFixed(1)} years`,
            `  Average age (non-diabetic): ${stats.avgAgeNonDiabetic.toFixed(1)} years`,
            `  Average pregnancies (diabetic): ${stats.avgPregnanciesDiabetic.toFixed(1)}`,
            `  Average pregnancies (non-diabetic): ${stats.avgPregnanciesNonDiabetic.toFixed(1)}`
        ];
        
        statsLines.forEach(line => {
            if (yPosition > 700) {
                doc.addPage();
                yPosition = 50;
                doc.fontSize(16).text('Detailed Statistics (Continued)', 50, yPosition);
                yPosition += 40;
            }
            doc.text(line, 50, yPosition);
            yPosition += 15;
        });
        
        doc.addPage();

        // Correlation Analysis
        doc.fontSize(16).text('Feature Correlation Analysis', 50, 50);
        doc.fontSize(12).text('Top Predictive Features (correlation with diabetes outcome):', 50, 80);
        
        yPosition = 110;
        correlations.sortedCorrelations.forEach(([feature, value], index) => {
            if (yPosition > 700) {
                doc.addPage();
                yPosition = 50;
                doc.fontSize(16).text('Feature Correlation Analysis (Continued)', 50, yPosition);
                yPosition += 40;
                doc.fontSize(12).text('Top Predictive Features (continued):', 50, yPosition);
                yPosition += 30;
            }
            doc.text(`${index + 1}. ${feature}: ${value.toFixed(3)}`, 70, yPosition);
            yPosition += 20;
        });
        
        doc.addPage();

        // Recommendations
        doc.fontSize(18).text('Clinical Recommendations & Insights', 50, 50, { align: 'center' });
        doc.fontSize(12);
        yPosition = 100;
        
        const recommendations = [
            "1. RISK ASSESSMENT:",
            "   • Focus on patients with glucose levels >126 mg/dL",
            "   • Monitor individuals with BMI > 30 closely",
            "   • Consider age and pregnancy history in assessment",
            "",
            "2. PREVENTION STRATEGIES:",
            "   • Weight management programs for high-BMI individuals",
            "   • Regular glucose monitoring for at-risk patients",
            "   • Lifestyle modification education",
            "",
            "3. EARLY DETECTION:",
            "   • Regular screening for patients with multiple risk factors",
            "   • Use feature correlations for risk stratification",
            "   • Implement predictive modeling for early intervention"
        ];
        
        recommendations.forEach(line => {
            if (yPosition > 700) {
                doc.addPage();
                yPosition = 50;
                doc.fontSize(18).text('Clinical Recommendations (Continued)', 50, yPosition, { align: 'center' });
                yPosition += 40;
            }
            doc.text(line, 50, yPosition);
            yPosition += 15;
        });
        
        doc.end();

        stream.on('finish', () => {
            console.log(`✅ PDF report generated: ${PDF_FILENAME}`);
            resolve();
        });

        stream.on('error', reject);
    });
}

// -------------------------------
// Main Function
// -------------------------------
async function main() {
    try {
        console.log("🚀 Starting Diabetes Patient Data Analysis...");
        
        // Load and clean data
        console.log("📊 Loading diabetes data from local file...");
        const rawData = await loadDiabetesData("diabetes.csv");
        const cleanedData = cleanDiabetesData(rawData);
        
        if (cleanedData.length === 0) {
            console.log("❌ No data available after cleaning");
            return;
        }
        
        // Perform analysis
        console.log("📈 Analyzing feature correlations...");
        const correlations = calculateCorrelations(cleanedData);
        
        console.log("📊 Calculating statistics...");
        const stats = calculateStatistics(cleanedData);
        
        // Generate PDF report
        console.log("📄 Generating PDF report...");
        await generateDiabetesPDF(stats, correlations);
        
        // Print key insights (FIXED the .center() error)
        console.log("\n" + "=".repeat(70));
        console.log("DIABETES ANALYSIS - KEY INSIGHTS");
        console.log("=".repeat(70));
        console.log(`📊 Patients: ${stats.totalPatients}`);
        console.log(`🎯 Diabetes prevalence: ${stats.diabetesPercentage.toFixed(1)}%`);
        console.log(`🩸 Glucose difference: +${(stats.avgGlucoseDiabetic - stats.avgGlucoseNonDiabetic).toFixed(1)} mg/dL`);
        console.log(`⚖️ BMI difference: +${(stats.avgBMIDiabetic - stats.avgBMINonDiabetic).toFixed(1)}`);
        
        const topFeature = correlations.sortedCorrelations[0];
        console.log(`🔝 Top Feature: ${topFeature[0]} (r=${topFeature[1].toFixed(3)})`);
        
        console.log("=".repeat(70));
        console.log("✅ Diabetes analysis complete! Report generated successfully.");
        
    } catch (error) {
        console.error("❌ Error during analysis:", error);
    }
}

// Run the analysis
main().catch(console.error);